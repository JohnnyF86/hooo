fn tauto_not_to_para (!a)^true  ->  false^a {
    x : (!a)^true;
    fn f a -> (!a)^true => false {
        y : a;
        lam g (!a)^true => false {
            x : (!a)^true;
            use triv;
            let x2 = triv(x) : !a;
            let r = x2(y) : false;
            return r;
        }
        return g;
    }

    use hooo_imply;
    let y2 = hooo_imply(f) : ((!a)^true)^a => false^a;
    use pow_lift;
    let y3 = pow_lift(x) : ((!a)^true)^a;
    let r = y2(y3) : false^a;
    return r;
}

fn para_to_tauto_not false^a  ->  (a => false)^true {
    x : false^a;
    use pow_to_imply_lift;
    let r = pow_to_imply_lift(x) : (a => false)^true;
    return r;
}

fn tauto_imply_refl true  ->  (a => a) {
    x : true;
    use refl;
    let y = refl() : a => a;
    return y;
}

fn tauto_eq_refl true  ->  (a == a) {
    x : true;
    use refl;
    let y = refl() : a => a;
    let r = refl(y, y) : a == a;
    return r;
}

fn tauto_nnexcm true  ->  !!excm(a) {
    x : true;
    lam f !!excm(a) {
        y : !excm(a);
        lam g !a {
            x2 : a;
            use left;
            let x3 = left(x2) : excm(a);
            let r = y(x3) : false;
            return r;
        }
        lam h !!a {
            x4 : !a;
            use right;
            let x5 = right(x4) : excm(a);
            let r = y(x5) : false;
            return r;
        }
        let r = h(g) : false;
        return r;
    }
    return f;
}

fn pow_eq_to_tauto_eq b =^= a  ->  (a == b)^true {
    x : b^a;
    y : a^b;

    use pow_to_imply_lift;
    let x2 = pow_to_imply_lift(x) : (a => b)^true;
    let y2 = pow_to_imply_lift(y) : (b => a)^true;

    use hooo_rev_and;
    let r = hooo_rev_and(x2, y2) : (a == b)^true;
    return r;
}

fn tauto_eq_to_pow_eq (a == b)^true  ->  a =^= b {
    x : (a == b)^true;
    use refl;
    let x2 = refl() : a^a;
    use pow_in_left_arg;
    let x3 = pow_in_left_arg(x2, x) : b^a;
    use pow_in_right_arg;
    let x4 = pow_in_right_arg(x2, x) : a^b;
    let r = refl(x3, x4) : b^a & a^b;
    return r;
}

fn pow_in_left_arg a^b & (a == c)^true  ->  c^b {
    x : a^b;
    y : (a == c)^true;

    use pow_lift;
    let y2 = pow_lift(y) : ((a == c)^true)^b;
    use hooo_rev_and;
    let y3 = hooo_rev_and(x, y2) : (a & (a == c)^true)^b;

    fn f a & (a == c)^true  ->  c {
        x : a;
        y : (a == c)^true;

        use triv;
        let x2 = triv(y) : a == c;
        use fst;
        let x3 = fst(x2) : a => c;
        let r = x3(x) : c;
        return r;
    }

    use pow_transitivity;
    let y4 = pow_transitivity() : (a & (a == c)^true)^b & c^(a & (a == c)^true) -> c^b;
    let f2 = f() : a & (a == c)^true -> c;
    let r = y4(y3, f2) : c^b;
    return r;
}

fn pow_in_right_arg a^b & (b == c)^true  ->  a^c {
    x : a^b;
    y : (b == c)^true;

    fn f c  ->  (b == c)^true => b {
        x : c;
        lam g (b == c)^true => b {
            y : (b == c)^true;
            use triv;
            let y2 = triv(y) : b == c;
            use snd;
            let y3 = snd(y2) : c => b;
            let r = y3(x) : b;
            return r;
        }
        return g;
    }

    use hooo_imply;
    let x2 = hooo_imply(f) : ((b == c)^true)^c => b^c;
    use pow_lift;
    let x3 = pow_lift(y) : ((b == c)^true)^c;
    let x4 = x2(x3) : b^c;
    use pow_transitivity;
    let r = pow_transitivity(x4, x) : a^c;
    return r;
}


