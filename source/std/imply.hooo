fn imply_transitivity : (a => b) & (b => c) -> (a => c) {
    x : a => b;
    y : b => c;
    lam f : (a => c) {
        arg : a;
        let x2 = x(arg) : b;
        let x3 = y(x2) : c;
        return x3;
    }
    return f;
}

fn modus_tollens : (a => b)  ->  (!b => !a) {
    x : a => b;
    lam f : !b => !a {
        y : !b;
        lam g : !a {
            z : a;
            let x2 = x(z) : b;
            let r = y(x2) : false;
            return r;
        }
        return g;
    }
    return f;
}

fn rev_modus_tollens_nn : (!!a => !!b)  ->  (!b => !a) {
    x : !!a => !!b;
    use modus_tollens;
    let y = modus_tollens(x) : !!!b => !!!a;
    use not_double;
    use imply_transitivity;
    let f = not_double() : !b => !!!b;
    let y2 = imply_transitivity(f, y) : !b => !!!a;
    use not_rev_triple;
    let g = not_rev_triple() : !!!a => !a;    
    let r = imply_transitivity(y2, g) : !b => !a;
    return r;
}

fn imply_in_left_arg : (a => b) & (a == c)  ->  (c => b) {
    x : a => b;
    y : a == c;
    use snd;
    let y2 = snd(y) : c => a;
    use imply_transitivity;
    let r = imply_transitivity(y2, x) : c => b;
    return r;
}

fn imply_in_right_arg : (a => b) & (b == c)  ->  (a => c) {
    x : a => b;
    y : b == c;
    use fst;
    let y2 = fst(y) : b => c;
    use imply_transitivity;
    let r = imply_transitivity(x, y2) : a => c;
    return r;
}

fn imply_eq_left : (a == b)  ->   (a => c) == (b => c) {
    x : a == b;
    lam f : (a => c) => (b => c) {
        y : a => c;
        use snd;
        let x2 = snd(x) : b => a;
        use imply_transitivity;
        let r = imply_transitivity(x2, y) : b => c;
        return r;
    }
    lam g : (b => c) => (a => c) {
        y : b => c;
        use fst;
        let x2 = fst(x) : a => b;
        use imply_transitivity;
        let r = imply_transitivity(x2, y) : a => c;
        return r;
    }
    use refl;
    let r = refl(f, g) : (a => c) == (b => c);
    return r;
}

fn imply_lift : a -> (b => a) {
    x : a;
    lam f : b => a {
        y : b;
        let r = x() : a;
        return r;
    }
    return f;
}

