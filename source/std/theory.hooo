
fn uniform_to uniform(a)  ->  (a^true | false^a) {
    axiom uniform_to : uniform(a)  ->  (a^true | false^a);
    x : uniform(a);
    let r = uniform_to(x) : (a^true | false^a);
    return r;
}

fn uniform_from (a^true | false^a)  ->  uniform(a) {
    axiom uniform_from : (a^true | false^a)  ->  uniform(a);
    x : a^true | false^a;
    let r = uniform_from(x) : uniform(a);
    return r;
}

fn tauto_uniform_eq true  ->  (uniform(a) == (a^true | false^a)) {
    x : true;
    use uniform_to;
    use uniform_from;
    let x2 = uniform_to() : uniform(a) => (a^true | false^a);
    let x3 = uniform_from() : (a^true | false^a) => uniform(a);
    use refl;
    let r = refl(x2, x3) : uniform(a) == (a^true | false^a);
    return r;
}

fn tauto_to_uniform a^true  ->  uniform(a) {
    x : a^true;
    use left;
    let y = left(x) : a^true | false^a;
    use uniform_from;
    let r = uniform_from(y) : uniform(a);
    return r;
}

fn para_to_uniform false^a  -> uniform(a) {
    x : false^a;
    use right;
    let y = right(x) : a^true | false^a;
    use uniform_from;
    let r = uniform_from(y) : uniform(a);
    return r;
}

fn theory_to theory(a)  ->  !uniform(a) {
    axiom theory_to : theory(a)  ->  !uniform(a);
    x : theory(a);
    let r = theory_to(x) : !uniform(a);
    return r;
}

fn theory_from !uniform(a)  ->  theory(a) {
    axiom theory_from : !uniform(a)  ->  theory(a);
    x : !uniform(a);
    let r = theory_from(x) : theory(a);
    return r;
}

fn theory_to_nor_tauto_para theory(a)  ->  !(a^true | false^a) {
    x : theory(a);
    use theory_to;
    let y = theory_to(x) : !uniform(a);
    use triv;
    use tauto_uniform_eq;
    let y2 = triv(tauto_uniform_eq) : uniform(a) == (a^true | false^a);
    use imply_in_left_arg;
    let r = imply_in_left_arg(y, y2) : !(a^true | false^a);        
    return r;
}

fn theory_to_ntauto theory(a)  ->  !(a^true) {
    x : theory(a);
    use theory_to_nor_tauto_para;
    let y = theory_to_nor_tauto_para(x) : !(a^true | false^a);
    use nleft;
    let r = nleft(y) : !(a^true);
    return r;
}

fn theory_to_npara theory(a)  ->  !(false^a) {
    x : theory(a);
    use theory_to_nor_tauto_para;
    let y = theory_to_nor_tauto_para(x) : !(a^true | false^a);
    use nright;
    let r = nright(y) : !(false^a);
    return r;
}

