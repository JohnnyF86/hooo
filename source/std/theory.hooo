
fn uniform_to : uniform'(a)  ->  (a^true | false^a) {
    axiom uniform_to : uniform'(a)  ->  (a^true | false^a);
    x : uniform'(a);
    let r = uniform_to(x) : (a^true | false^a);
    return r;
}

fn uniform_from : (a^true | false^a)  ->  uniform'(a) {
    axiom uniform_from : (a^true | false^a)  ->  uniform'(a);
    x : a^true | false^a;
    let r = uniform_from(x) : uniform'(a);
    return r;
}

fn tauto_uniform_eq : true  ->  (uniform'(a) == (a^true | false^a)) {
    x : true;
    use uniform_to;
    use uniform_from;
    let x2 = uniform_to() : uniform'(a) => (a^true | false^a);
    let x3 = uniform_from() : (a^true | false^a) => uniform'(a);
    use refl;
    let r = refl(x2, x3) : uniform'(a) == (a^true | false^a);
    return r;
}

fn tauto_to_uniform : a^true  ->  uniform'(a) {
    x : a^true;
    use left;
    let y = left(x) : a^true | false^a;
    use uniform_from;
    let r = uniform_from(y) : uniform'(a);
    return r;
}

fn para_to_uniform : false^a  -> uniform'(a) {
    x : false^a;
    use right;
    let y = right(x) : a^true | false^a;
    use uniform_from;
    let r = uniform_from(y) : uniform'(a);
    return r;
}

fn theory_to : theory'(a)  ->  !uniform'(a) {
    axiom theory_to : theory'(a)  ->  !uniform'(a);
    x : theory'(a);
    let r = theory_to(x) : !uniform'(a);
    return r;
}

fn theory_from : !uniform'(a)  ->  theory'(a) {
    axiom theory_from : !uniform'(a)  ->  theory'(a);
    x : !uniform'(a);
    let r = theory_from(x) : theory'(a);
    return r;
}

fn theory_to_nor_tauto_para : theory'(a)  ->  !(a^true | false^a) {
    x : theory'(a);
    use theory_to;
    let y = theory_to(x) : !uniform'(a);
    use triv;
    use tauto_uniform_eq;
    let y2 = triv(tauto_uniform_eq) : uniform'(a) == (a^true | false^a);
    use imply_in_left_arg;
    let r = imply_in_left_arg(y, y2) : !(a^true | false^a);        
    return r;
}

fn theory_to_ntauto : theory'(a)  ->  !(a^true) {
    x : theory'(a);
    use theory_to_nor_tauto_para;
    let y = theory_to_nor_tauto_para(x) : !(a^true | false^a);
    use nleft;
    let r = nleft(y) : !(a^true);
    return r;
}

fn theory_to_npara : theory'(a)  ->  !(false^a) {
    x : theory'(a);
    use theory_to_nor_tauto_para;
    let y = theory_to_nor_tauto_para(x) : !(a^true | false^a);
    use nright;
    let r = nright(y) : !(false^a);
    return r;
}

fn uniform_to_tauto_excm : uniform'(a)  ->  excm(a)^true {
    x : uniform'(a);
    lam g : a^true => excm(a)^true {
        y : a^true;
        use left;
        use pow_transitivity;
        let f = pow_transitivity() : a^true & excm(a)^a -> excm(a)^true;
        let l = left() : excm(a)^a;
        let r = f(y, l) : excm(a)^true;
        return r;
    }
    lam h : false^a => excm(a)^true {
        y : false^a;
        use pow_to_imply_lift;
        let x2 = pow_to_imply_lift(y) : (!a)^true;
        use right;
        use pow_transitivity;
        let y2 = right() : excm(a)^(!a);
        let r = pow_transitivity(x2, y2) : excm(a)^true;
        return r;
    }
    use uniform_to;
    let x2 = uniform_to(x) : a^true | false^a;
    let r = match x2 (g, h) : excm(a)^true;
    return r;
}

fn tauto_excm_to_uniform : excm(a)^true  ->  uniform'(a) {
    x : excm(a)^true;
    use hooo_or;
    let x2 = hooo_or(x) : a^true | (!a)^true;
    use tauto_to_uniform;
    let y = tauto_to_uniform() : a^true => uniform'(a);
    use tauto_not_to_para;
    let tnp = tauto_not_to_para() : (!a)^true => false^a;
    use para_to_uniform;
    let ptu = para_to_uniform() : false^a => uniform'(a);
    use imply_transitivity;
    let y2 = imply_transitivity(tnp, ptu) : (!a)^true => uniform'(a); 
    let r = match x2 (y, y2) : uniform'(a);
    return r;
}

