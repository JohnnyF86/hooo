
fn nat_zero_ty true -> ty(z', nat') {
    axiom nat_zero_ty : true -> ty(z', nat');
    x : true;
    let r = nat_zero_ty(x) : ty(z', nat');
    return r;
}

fn nat_succ_ty ty(a, nat') -> ty(s(a), nat') {
    axiom nat_succ_ty : ty(a, nat') -> ty(s(a), nat');
    x : ty(a, nat');
    let r = nat_succ_ty(x) : ty(s(a), nat');
    return r;
}

fn nat_succ_eq a == b -> s(a) == s(b) {
    axiom nat_succ_eq : a == b -> s(a) == s(b);
    x : a == b;
    let r = nat_succ_eq(x) : s(a) == s(b);
    return r;
}

fn nat_para_eq_zero_pos (z' == s(a)) -> false {
    axiom nat_para_eq_zero_pos : (z' == s(a)) -> false;
    x : z' == s(a);
    let r = nat_para_eq_zero_pos(x) : false;
    return r;
}

fn nat_eq_succ_lower (s(a) == s(b)) -> (a == b) {
    axiom nat_eq_succ_lower : (s(a) == s(b)) -> (a == b);
    x : s(a) == s(b);
    let r = nat_eq_succ_lower(x) : a == b;
    return r;
}

fn nat_para_eq_prev (a == prev(a)) -> false {
    axiom nat_para_eq_prev : (a == prev(a)) -> false;
    x : a == prev(a);
    let r = nat_para_eq_prev(x) : false;
    return r;
}

/// Definition.
fn nat_def ty(a, nat') -> (a == z') | ty(prev(a), nat') & (a == s(prev(a))) {
    axiom nat_def : ty(a, nat') -> (a == z') | ty(prev(a), nat') & (a == s(prev(a)));
    x : ty(a, nat');
    let r = nat_def(x) : (a == z') | ty(prev(a), nat') & (a == s(prev(a)));
    return r;
}

/// Induction.
fn nat_ind ex(ty(z', nat'), a) & ex(ty(s(n), nat'), a) -> a {
    axiom nat_ind : ex(ty(z', nat'), a) & ex(ty(s(n), nat'), a) -> a;
    x : ex(ty(z', nat'), a) & ex(ty(s(n), nat'), a);
    let r = nat_ind(x) : a;
    return r;
}

fn nat_one_to 1' -> s(z') {
    axiom one_to : 1' -> s(z');
    x : 1';
    let r = one_to(x) : s(z');
    return r;
}

fn nat_one_from s(z') -> 1' {
    axiom one_from : s(z') -> 1';
    x : s(z');
    let r = one_from(x) : 1';
    return r;
}

fn nat_one_eq true -> 1' == s(z') {
    x : true;
    use nat_one_from;
    use nat_one_to;
    use refl;
    let y = refl(nat_one_to, nat_one_from) : 1' =^= s(z');
    use pow_eq_to_tauto_eq;
    let y2 = pow_eq_to_tauto_eq(y) : (1' == s(z'))^true;
    use triv;
    let r = triv(y2) : 1' == s(z');
    return r;
}

fn nat_one_ty true -> ty(1', nat') {
    x : true;
    use nat_zero_ty;
    let y = nat_zero_ty(x) : ty(z', nat');
    use nat_succ_ty;
    let y2 = nat_succ_ty(y) : ty(s(z'), nat');
    use nat_one_eq;
    let x2 = nat_one_eq(x) : 1' == s(z'); 
    use ty_eq_left;
    let x3 = ty_eq_left(x2) : ty(1', nat') == ty(s(z'), nat');
    use snd;
    let x4 = snd(x3) : ty(s(z'), nat') => ty(1', nat');
    let r = x4(y2) : ty(1', nat');
    return r;
}

fn nat_two_to 2' -> s(s(z')) {
    axiom two_to : 2' -> s(s(z'));
    x : 2';
    let r = two_to(x) : s(s(z'));
    return r;
}

fn nat_two_from s(s(z')) -> 2' {
    axiom two_from : s(s(z')) -> 2';
    x : s(s(z'));
    let r = two_from(x) : 2';
    return r;
}

fn nat_two_eq true -> 2' == s(s(z')) {
    x : true;
    use nat_two_from;
    use nat_two_to;
    use refl;
    let y = refl(nat_two_to, nat_two_from) : 2' =^= s(s(z'));
    use pow_eq_to_tauto_eq;
    let y2 = pow_eq_to_tauto_eq(y) : (2' == s(s(z')))^true;
    let r = y2(x) : 2' == s(s(z'));
    return r;
}

fn nat_two_ty true -> ty(2', nat') {
    x : true;
    use nat_one_ty;
    let y = nat_one_ty(x) : ty(1', nat');
    use nat_one_eq;
    let y2 = nat_one_eq(x) : 1' == s(z');
    use ty_eq_left;
    let f = ty_eq_left(y2) : ty(1', nat') == ty(s(z'), nat');
    use fst;
    let f2 = fst(f) : ty(1', nat') => ty(s(z'), nat');
    let f3 = f2(y) : ty(s(z'), nat');
    use nat_succ_ty;
    let f4 = nat_succ_ty(f3) : ty(s(s(z')), nat');
    use nat_two_eq;
    let y3 = nat_two_eq(x) : 2' == s(s(z'));
    let x2 = ty_eq_left(y3) : ty(2', nat') == ty(s(s(z')), nat');
    use snd;
    let x3 = snd(x2) : ty(s(s(z')), nat') => ty(2', nat');
    let r = x3(f4) : ty(2', nat');
    return r;
}

/*
Addition of natural numbers.
*/

fn nat_add_ty true -> ty(add', nat' => nat' => nat') {
    axiom add_ty : true -> ty(add', nat' => nat' => nat');
    x : true;
    let r = add_ty(x) : ty(add', nat' => nat' => nat');
    return r;
}

fn nat_add_zero ty(a, nat') -> add(a, z') == a {
    axiom nat_add_zero : ty(a, nat') -> add(a, z') == a;
    x : ty(a, nat');
    let r = nat_add_zero(x) : add(a, z') == a;
    return r;
}

fn nat_add_succ ty(a, nat') & ty(b, nat') -> add(a, s(b)) == s(add(a, b)) {
    axiom nat_add_succ : ty(a, nat') & ty(b, nat') -> add(a, s(b)) == s(add(a, b));
    x : ty(a, nat') & ty(b, nat');
    let r = nat_add_succ(x) : add(a, s(b)) == s(add(a, b));
    return r;
}

fn nat_add_eq_left a == b -> add(a, c) == add(b, c) {
    axiom nat_add_eq_left : a == b -> add(a, c) == add(b, c);
    x : a == b;
    let r = nat_add_eq_left(x) : add(a, c) == add(b, c);
    return r;
}

fn nat_add_eq_right a == b -> add(c, a) == add(c, b) {
    axiom nat_add_eq_right : a == b -> add(c, a) == add(c, b);
    x : a == b;
    let r = nat_add_eq_right(x) : add(c, a) == add(c, b);
    return r;
}

fn nat_neq_zero_one true -> !(z' == s(z')) {
    x : true;
    use nat_para_eq_zero_pos;
    let r = nat_para_eq_zero_pos() : !(z' == s(z'));
    return r;
}

fn nat_para_eq_succ ty(a, nat') & (a == s(a)) -> false {
    x : ty(a, nat');
    y : a == s(a);

    use nat_def;
    let x2 = nat_def(x) : (a == z') | ty(prev(a), nat') & (a == s(prev(a)));

    lam f !(a == z') {
        z : a == z';
        use eq_symmetry;
        let z2 = eq_symmetry(z) : z' == a;
        use eq_transitivity;
        let z3 = eq_transitivity(z2, y) : z' == s(a);
        use nat_para_eq_zero_pos;
        let r = nat_para_eq_zero_pos(z3) : false;
        return r;
    }

    lam g !(ty(prev(a), nat') & (a == s(prev(a)))) {
        x3 : ty(prev(a), nat');
        y3 : a == s(prev(a));
        use eq_symmetry;
        let x4 = eq_symmetry(y) : s(a) == a;
        use eq_transitivity;
        let x5 = eq_transitivity(x4, y3) : s(a) == s(prev(a));
        use nat_eq_succ_lower;
        let x6 = nat_eq_succ_lower(x5) : a == prev(a);
        use nat_para_eq_prev;
        let r = nat_para_eq_prev(x6) : false;
        return r;        
    }

    let r = match x2 (f, g) : false;
    return r;
}

fn nat_one_plus_one_equals_two true -> add(1', 1') == 2' {
    x : true;

    use nat_one_eq;
    let x2 = nat_one_eq(x) : 1' == s(z');
    use nat_one_ty;
    let x3 = nat_one_ty(x) : ty(1', nat');
    use ty_eq_left;
    let x4 = ty_eq_left(x2) : ty(1', nat') == ty(s(z'), nat');
    use fst;
    let x5 = fst(x4) : ty(1', nat') => ty(s(z'), nat');
    let succ_ty = x5(x3) : ty(s(z'), nat');
    use nat_zero_ty;
    let zero_ty = nat_zero_ty(x) : ty(z', nat');
    use nat_add_succ;
    let x7 = nat_add_succ(succ_ty, zero_ty) : add(s(z'), s(z')) == s(add(s(z'), z'));

    use nat_add_zero;
    let y1 = nat_add_zero(succ_ty) : add(s(z'), z') == s(z');
    use nat_succ_eq;
    let y2 = nat_succ_eq(y1) : s(add(s(z'), z')) == s(s(z'));
    use eq_transitivity;
    let y3 = eq_transitivity(x7, y2) : add(s(z'), s(z')) == s(s(z'));

    use nat_two_ty;
    let x8 = nat_two_ty(x) : ty(2', nat');
    use nat_two_eq;
    let x9 = nat_two_eq(x) : 2' == s(s(z'));
    let x10 = ty_eq_left(x9) : ty(2', nat') == ty(s(s(z')), nat');
    let x11 = fst(x10) : ty(2', nat') => ty(s(s(z')), nat');
    let x12 = x11(x8) : ty(s(s(z')), nat');
    use nat_add_zero;
    use eq_symmetry;
    let x15 = eq_symmetry(x9) : s(s(z')) == 2';
    let x16 = eq_transitivity(y3, x15) : add(s(z'), s(z')) == 2';
    use nat_add_eq_left;
    let x17 = nat_add_eq_left(x2) : add(1', s(z')) == add(s(z'), s(z'));
    let x18 = eq_transitivity(x17, x16) : add(1', s(z')) == 2';
    use nat_add_eq_right;
    let x19 = nat_add_eq_right(x2) : add(1', 1') == add(1', s(z'));
    let r = eq_transitivity(x19, x18) : add(1', 1') == 2';
    return r;
}

