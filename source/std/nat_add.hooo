
/*
Addition of natural numbers.
*/

use nat;
use prev;
use z;
use s;
use 1;
use 2;
use cong;

sym add;

fn nat_add_ty : true -> (add' : nat' => nat' => nat') {
    axiom add_ty : true -> (add' : nat' => nat' => nat');
    x : true;
    let r = add_ty(x) : (add' : nat' => nat' => nat');
    return r;
}

fn nat_add_cong : true -> cong'(add') {
    axiom nat_add_cong : true -> cong'(add');
    x : true;
    let r = nat_add_cong(x) : cong'(add');
    return x;
}

fn nat_add_zero : (a : nat') -> add'(a, z') == a {
    axiom nat_add_zero : (a : nat') -> add'(a, z') == a;
    x : (a : nat');
    let r = nat_add_zero(x) : add'(a, z') == a;
    return r;
}

fn nat_add_succ : (a : nat') & (b : nat') -> add'(a, s'(b)) == s'(add'(a, b)) {
    axiom nat_add_succ : (a : nat') & (b : nat') -> add'(a, s'(b)) == s'(add'(a, b));
    x : (a : nat') & (b : nat');
    let r = nat_add_succ(x) : add'(a, s'(b)) == s'(add'(a, b));
    return r;
}

fn nat_add_eq_left : a == b -> add'(a, c) == add'(b, c) {
    use cong_eq_left;
    use nat_add_cong;
    use triv;

    x : a == b;

    let x2 = triv(nat_add_cong) : cong'(add');
    let r = cong_eq_left(x2, x) : add'(a, c) == add'(b, c);
    return r;
}

fn nat_add_eq_right : a == b -> add'(c, a) == add'(c, b) {
    use cong_eq_right;
    use nat_add_cong;
    use triv;

    x : a == b;

    let x2 = triv(nat_add_cong) : cong'(add');
    let r = cong_eq_right(x2, x) : add'(c, a) == add'(c, b);
    return r;
}

fn nat_add_eq_both : (a == c) & (b == d) -> add'(a, b) == add'(c, d) {
    use cong_eq_both;
    use nat_add_cong;
    use triv;

    x : a == c;
    y : b == d;

    let x2 = triv(nat_add_cong) : cong'(add');
    let r = cong_eq_both(x2, x, y) : add'(a, b) == add'(c, d);
    return r;
}

fn nat_one_plus_one_equals_two : true -> add'(1', 1') == 2' {
    use eq_symmetry;
    use eq_transitivity;
    use eq_transitivity_sym;
    use nat_add_eq_both;
    use nat_add_succ;
    use nat_add_zero;
    use nat_one_eq;
    use nat_one_ty;
    use nat_succ_eq;
    use nat_two_ty;
    use nat_two_eq;
    use nat_zero_ty;
    use ty_in_left_arg;

    x : true;

    let x2 = nat_one_eq(x) : 1' == s'(z');
    let x3 = nat_one_ty(x) : (1' : nat');
    let succ_ty = ty_in_left_arg(x3, x2) : (s'(z') : nat');
    let zero_ty = nat_zero_ty(x) : (z' : nat');
    let x7 = nat_add_succ(succ_ty, zero_ty) : add'(s'(z'), s'(z')) == s'(add'(s'(z'), z'));

    let y1 = nat_add_zero(succ_ty) : add'(s'(z'), z') == s'(z');
    let y2 = nat_succ_eq(y1) : s'(add'(s'(z'), z')) == s'(s'(z'));
    let y3 = eq_transitivity(x7, y2) : add'(s'(z'), s'(z')) == s'(s'(z'));

    let x9 = nat_two_eq(x) : 2' == s'(s'(z'));
    let x16 = eq_transitivity_sym(y3, x9) : add'(s'(z'), s'(z')) == 2';
    let x17 = nat_add_eq_both(x2, x2) : add'(1', 1') == add'(s'(z'), s'(z'));

    let r = eq_transitivity(x17, x16) : add'(1', 1') == 2';
    return r;
}

fn nat_add_check_all_ty : (a : nat') & (b : nat') -> (add'(a, b) : nat') {
    x : (a : nat');
    y : (b : nat');
    use ty_app2;
    use nat_add_ty;
    use triv;
    let x2 = triv(nat_add_ty) : (add' : nat' => nat' => nat');
    let r = ty_app2(x2, x, y) : (add'(a, b) : nat');
    return r;
}

fn nat_add_from_zero_left : (a : nat') & (add'(a, z') == z') -> a == z' {
    use eq_transitivity_rev_sym;
    use nat_add_zero;

    x : (a : nat');
    y : add'(a, z') == z';

    let x2 = nat_add_zero(x) : add'(a, z') == a;
    let r = eq_transitivity_rev_sym(x2, y) : a == z';
    return r;
}

fn nat_add_from_zero_right : (a : nat') & (add'(z', a) == z') -> a == z' {
    use nat_def;
    use refl;

    x : (a : nat');
    y : add'(z', a) == z';

    let x2 = nat_def(x) : (a == z') | (prev'(a) : nat') & (a == s'(prev'(a)));
    let x3 = refl() : (a == z') => (a == z');

    lam f : (prev'(a) : nat') & (a == s'(prev'(a))) => (a == z') {
        use eq_transitivity;
        use eq_transitivity_rev_sym;
        use nat_add_eq_right;
        use nat_add_succ;
        use nat_para_eq_zero_pos;
        use nat_zero_ty;
        use triv;

        z : (prev'(a) : nat');
        z2 : a == s'(prev'(a));

        let z3 = nat_add_eq_right(z2) : add'(z', a) == add'(z', s'(prev'(a)));
        let zero_ty = triv(nat_zero_ty) : (z' : nat'); 
        let z4 = nat_add_succ(zero_ty, z) :
            add'(z', s'(prev'(a))) == s'(add'(z', prev'(a)));
        let z5 = eq_transitivity(z3, z4) :
            add'(z', a) == s'(add'(z', prev'(a)));
        let z5 = eq_transitivity_rev_sym(y, z5) : z' == s'(add'(z', prev'(a)));
        let z6 = nat_para_eq_zero_pos(z5) : false;
        let r = match z6 : a == z';
        return r;
    }

    let r = match x2 (x3, f) : a == z';
    return r;
}

