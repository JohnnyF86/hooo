
fn and_map : a -> b => (a & b) {
    x : a;

    lam f : b => (a & b) {
        x2 : b;

        use refl;
        let x3 = refl(x, x2) : (a & b);
        return x3;
    }
    return f;
}

fn and_symmetry : a & b -> b & a {
    use fst;
    use snd;

    x : a & b;
    let y = fst(x) : a;
    let z = snd(x) : b;

    use refl;
    let r = refl(z, y) : (b & a);
    return r;
}

fn fst : (a & b) -> a {
    x : a;
    y : b;
    return x;
}

fn snd : a & b -> b {
    x : a;
    y : b;
    return y;
}


