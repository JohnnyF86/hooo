use cong;
use prop;

sym prop_and;

fn and_ty : true -> (prop_and' : prop' => prop' => prop') {
    axiom and_ty : true -> (prop_and' : prop' => prop' => prop');
    x : true;
    let r = and_ty(x) : (prop_and' : prop' => prop' => prop');
    return r;
}

fn and_sym_def : true -> prop_and' == sym(a, sym(b, a' & b')) {
    axiom and_sym_def : true -> prop_and' == sym(a, sym(b, a' & b'));
    x : true;
    let r = and_sym_def(x) : prop_and' == sym(a, sym(b, a' & b'));
    return r;
}

fn and_def : true -> prop_and'(a, b) == (a & b) {
    use and_cong;
    use and_sym_def;
    use and_ty;
    use cong_fun_bin_eq;
    use cong_fun_eq;
    use cong_in_arg;

    x : true;

    let y2 = and_cong(x) : cong'(prop_and');
    let y3 = and_sym_def(x) : prop_and' == sym(a, sym(b, a' & b'));
    let y4 = cong_in_arg(y2, y3) : cong'(sym(a, sym(b, a' & b')));
    let y5 = and_ty(x) : (prop_and' : prop' => prop' => prop');
    let y6 = cong_fun_bin_eq(y2, y4, y5, y3) :
        prop_and'(a, b) == sym(a, sym(b, a' & b'))(a, b);
    let r = y6() : prop_and'(a, b) == (a & b);
    return r;
}

fn and_cong : true -> cong'(prop_and') {
    axiom and_cong : true -> cong'(prop_and');
    x : true;
    let r = and_cong(x) : cong'(prop_and');
    return r;
}

fn and_map : a -> b => (a & b) {
    x : a;

    lam f : b => (a & b) {
        x2 : b;

        use refl;
        let x3 = refl(x, x2) : (a & b);
        return x3;
    }
    return f;
}

fn and_symmetry : a & b -> b & a {
    use fst;
    use snd;

    x : a & b;
    let y = fst(x) : a;
    let z = snd(x) : b;

    use refl;
    let r = refl(z, y) : (b & a);
    return r;
}

fn and_transitivity : (a & b) & (b & c)  ->  (a & c) {
    x : a & b;
    y : b & c;
    use fst;
    let x2 = fst(x) : a;
    use snd;
    let y2 = snd(y) : c;
    use refl;
    let r = refl(x2, y2) : a & c;
    return r;
}

fn fst : (a & b) -> a {
    x : a;
    y : b;
    return x;
}

fn snd : a & b -> b {
    x : a;
    y : b;
    return y;
}

