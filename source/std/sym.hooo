fn sym_fun_eq : true -> sym(a, f(a')) == f {
    axiom sym_fun_eq : true -> sym(a, f(a')) == f;
    x : true;
    let r = sym_fun_eq(x) : sym(a, f(a')) == f;
    return r;
}

fn sym_transport : sym(a, b) & (b == c)^(sym a) -> sym(a, c) {
    axiom sym_transport : sym(a, b) & (b == c)^(sym a) -> sym(a, c);
    x : sym(a, b) & (b == c)^(sym a);
    let r = sym_transport(x) : sym(a, c);
    return r;
}

fn sym_eq : (a == b)^(sym c) -> sym(c, a) == sym(c, b) {
    use eq_symmetry;
    use pow_transitivity;
    use refl;
    use sym_transport;

    x : (a == b)^(sym c);

    let x2 = pow_transitivity(x, eq_symmetry) : (b == a)^(sym c);
    lam f : sym(c, a) => sym(c, b) {
        y : sym(c, a);
        let r = sym_transport(y, x) : sym(c, b);
        return r;
    }
    lam g : sym(c, b) => sym(c, a) {
        y : sym(c, b);
        let r = sym_transport(y, x2) : sym(c, a);
        return r;
    }
    let r = refl(f, g) : sym(c, a) == sym(c, b);
    return r;
}

fn sym_all_pow_absurd : all(a -> b) -> false {
    x : all(a -> b);
    let x2 = x() : a -> b;
    let x3 = x() : (a -> b) -> false;
    let r = x3(x2) : false;
    return r;
}

fn sym_absurd : a & sym(a, all(a' -> b))(a) -> false {
    x : a;
    y : sym(a, all(a' -> b))(a);
    let y2 = y() : a -> false;
    let r = y2(x) : false;
    return r;
}

fn sym_eq_refl : sym a  ->  a' == a' {
    sym a;
    use eq_refl;
    use triv;
    let r = triv(eq_refl) : a' == a';
    return r;
}

fn sym_from : sym(a, a')(a) -> a {
    x : sym(a, a')(a);
    let r = x() : a;
    return r;
}

fn sym_unwrap : sym(a, b)(a) -> b {
    x : sym(a, b)(a);
    let r = x() : b;
    return r;
}

fn sym_to_all : a -> sym(a, all(a'))(a) {
    x : a;
    let r = x() : sym(a, all(a'))(a);
    unsafe return r;
}

fn sym_from_all : sym(a, all(a'))(a) -> a {
    x : sym(a, all(a'))(a);
    let r = x() : a;
    return r;
}

fn sym_all_conv : sym(a, all(a'))(a) -> sym(b, all(b'))(a) {
    x : sym(a, all(a'))(a);
    let r = x() : sym(b, all(b'))(a);
    unsafe return r;
}

fn sym_pow_to_pow_tauto : sym(f, a^b)(f) -> sym(f, a^(b^true))(f) {
    x : sym(f, a^b)(f);
    let x2 = x() : a^b;
    use pow_to_pow_tauto;
    let x3 = pow_to_pow_tauto(x2) : a^(b^true);
    let r = x3() : sym(f, a^(b^true))(f);
    unsafe return r;
}

fn sym_pow_lift : a^b -> (sym(a, all(a'))(a))^(sym(b, all(b'))(b)) {
    use sym_to_all;
    use sym_from_all;
    use pow_transitivity;

    x : a^b;

    let f = sym_from_all() : sym(b, all(b'))(b) -> b;
    let x2 = pow_transitivity(f, x) : sym(b, all(b'))(b) -> a;
    let g = sym_to_all() : a -> sym(a, all(a'))(a);
    let r = pow_transitivity(x2, g) : sym(b, all(b'))(b) -> sym(a, all(a'))(a);
    unsafe return r;
}

