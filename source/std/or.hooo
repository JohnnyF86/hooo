use cong;
use prop;

sym prop_or;

fn or_ty : true -> (prop_or' : prop' => prop' => prop') {
    axiom or_ty : true -> (prop_or' : prop' => prop' => prop');
    x : true;
    let r = or_ty(x) : (prop_or' : prop' => prop' => prop');
    return r;
}

fn or_def : true -> prop_or'(a, b) == (a | b) {
    axiom or_def : true -> prop_or'(a, b) == (a | b);
    x : true;
    let r = or_def(x) : prop_or'(a, b) == (a | b);
    return r;
}

fn or_cong : true -> cong'(prop_or') {
    axiom or_cong : true -> cong'(prop_or');
    x : true;
    let r = or_cong(x) : cong'(prop_or');
    return r;
}

fn or_symmetry : a | b -> b | a {
    use unify;
    use left;
    use right;

    x : a | b;

    let x2 = right() : a => (b | a);
    let x3 = left() : b => (b | a);

    let x4 = unify(x, x2, x3) : (b | a);
    return x4;
}

fn left : a -> a | b {
    axiom left : a -> a | b;
    x : a;
    let r = left(x) : a | b;
    return r;
}

fn right : b -> a | b {
    axiom right : b -> a | b;
    x : b;
    let r = right(x) : a | b;
    return r;
}

fn nleft : !(a | b) -> !a {
    x : !(a | b);
    use left;
    use modus_tollens;
    let y = modus_tollens(left) : !(a | b) => !a;
    let r = y(x) : !a;
    return r;
}

fn nright : !(a | b) -> !b {
    x : !(a | b);
    use right;
    use modus_tollens;
    let y = modus_tollens(right) : !(a | b) => !b;
    let r = y(x) : !b;
    return r;
}

