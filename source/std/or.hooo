fn or_symmetry a | b -> b | a {
    use unify;
    use left;
    use right;

    x : a | b;

    let x2 = right() : a => (b | a);
    let x3 = left() : b => (b | a);

    let x4 = unify(x, x2, x3) : (b | a);
    return x4;
}

fn left a -> a | b {
    x : a;
    return x;
}

fn right b -> a | b {
    x : b;
    return x;
}

fn nleft !(a | b) -> !a {
    x : !(a | b);
    use left;
    use modus_tollens;
    let y = modus_tollens(left) : !(a | b) => !a;
    let r = y(x) : !a;
    return r;
}

fn nright !(a | b) -> !b {
    x : !(a | b);
    use right;
    use modus_tollens;
    let y = modus_tollens(right) : !(a | b) => !b;
    let r = y(x) : !b;
    return r;
}

