
fn qu_in_arg qu(a) & (a == b)^true  ->  qu(b) {
    axiom qu_in_arg : qu(a) & (a == b)^true  ->  qu(b);
    x : qu(a);
    y : (a == b)^true;
    let r = qu_in_arg(x, y) : qu(b);
    return r;
}

fn q_from (a == b) & qu(a) & qu(b)  ->  q(a, b) {
    axiom q_from : (a == b) & qu(a) & qu(b)  ->  q(a, b);
    x : a == b;
    y : qu(a);
    z : qu(b);
    let r = q_from(x, y, z) : q(a, b);
    return r;
}

fn q_to q(a, b)  ->  (a == b) & qu(a) & qu(b) {
    axiom q_to : q(a, b)  ->  (a == b) & qu(a) & qu(b);
    x : q(a, b);
    let r = q_to(x) : (a == b) & qu(a) & qu(b);
    return r;
}

fn qu_to_q qu(a)  ->  q(a, a) {
    x : qu(a);
    use std::refl;
    let y = refl() : a => a;
    let y2 = refl(y, y) : a == a;
    use q_from;
    let r = q_from(y2, x, x) : q(a, a);
    return r;
}

fn q_to_qu q(a, a)  ->  qu(a) {
    x : q(a, a);
    use q_to;
    let y = q_to(x) : (a == a) & qu(a) & qu(a);
    use std::snd;
    let y2 = snd(y) : qu(a) & qu(a);
    let r = snd(y2) : qu(a);
    return r;
}

fn q_left q(a, b)  ->  q(a, a) {
    x : q(a, b);
    use q_to;
    let y = q_to(x) : (a == b) & qu(a) & qu(b);
    use std::snd;
    let y2 = snd(y) : qu(a) & qu(b);
    use std::fst;
    let y3 = fst(y2) : qu(a);
    use qu_to_q;
    let r = qu_to_q(y3) : q(a, a);
    return r;
}

fn q_right q(a, b)  ->  q(b, b) {
    x : q(a, b);
    use q_to;
    let y = q_to(x) : (a == b) & qu(a) & qu(b);
    use std::snd;
    let y2 = snd(y) : qu(a) & qu(b);
    let y3 = snd(y2) : qu(b);
    use qu_to_q;
    let r = qu_to_q(y3) : q(b, b);
    return r;
}

fn q_to_eq q(a, b)  ->  (a == b) {
    x : q(a, b);
    use q_to;
    let y = q_to(x) : (a == b) & qu(a) & qu(b);
    use std::fst;
    let r = fst(y) : (a == b);
    return r;
}

fn neq_to_sesh !(a == b)  ->  !q(a, b) {
    x : !(a == b);
    use q_to_eq;
    let y = q_to_eq() : q(a, b) => (a == b);
    use std::modus_tollens;
    let y2 = modus_tollens(y) : !(a == b) => !q(a, b);
    let r = y2(x) : !q(a, b);
    return r;
}

fn nqu_to_sesh !qu(a)  ->  !q(a, a) {
    x: !qu(a);
    use q_to_qu;
    use std::modus_tollens;
    let y = modus_tollens(q_to_qu) : !qu(a) => !q(a, a);
    let r = y(x) : !q(a, a);
    return r;
}

fn sesh_left !q(a, a)  ->  !q(a, b) {
    x : !q(a, a);
    use std::modus_tollens;
    use q_left;
    let y = modus_tollens(q_left) : !q(a, a) => !q(a, b);
    let r = y(x) : !q(a, b);
    return r;
}

fn sesh_right !q(b, b)  ->  !q(a, b) {
    x : !q(b, b);
    use std::modus_tollens;
    use q_right;
    let y = modus_tollens(q_right) : !q(b, b) => !q(a, b);
    let r = y(x) : !q(a, b);
    return r;
}

